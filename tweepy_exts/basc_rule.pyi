import tweepy
from _typeshed import Incomplete
from typing import Any, List, Optional

class BasicRule:
    max_query_len: Incomplete
    negated_query: str
    non_negated_query: str
    def __init__(self, max_query_len: int = ..., *args: Any, **kwargs: Any) -> None: ...
    def has_links(self, negated: bool = ...) -> None: ...
    def has_media(self, negated: bool = ...) -> None: ...
    def has_images(self, negated: bool = ...) -> None: ...
    def is_reply(self, negated: bool = ...) -> None: ...
    def is_retweet(self, negated: bool = ...) -> None: ...
    def is_quote(self, negated: bool = ...) -> None: ...
    def is_verified(self, negated: bool = ...) -> None: ...
    def has_mentions(self, negated: bool = ...) -> None: ...
    def has_video_link(self, negated: bool = ...) -> None: ...
    def has_geo(self, negated: bool = ...) -> None: ...
    def lang(self, lang: str) -> None: ...
    def has_hashtags(self, negated: bool = ...) -> None: ...
    def build(self) -> tweepy.StreamRule: ...

class BasicMultipleRulesBuilder:
    targets: Incomplete
    max_rules: Incomplete
    max_query_len: Incomplete
    is_retweet: Incomplete
    is_reply: Incomplete
    is_quote: Incomplete
    is_verified: Incomplete
    is_nullcast: Incomplete
    has_hashtags: Incomplete
    has_cashtags: Incomplete
    has_links: Incomplete
    has_mentions: Incomplete
    has_media: Incomplete
    has_images: Incomplete
    has_video_links: Incomplete
    has_geo: Incomplete
    lang: Incomplete
    rules: Incomplete
    def __init__(self, targets: List[str], max_rules: int = ..., max_query_len: int = ..., is_retweet: Optional[bool] = ..., is_reply: Optional[bool] = ..., is_quote: Optional[bool] = ..., is_verified: Optional[bool] = ..., is_nullcast: Optional[bool] = ..., has_hashtags: Optional[bool] = ..., has_cashtags: Optional[bool] = ..., has_links: Optional[bool] = ..., has_mentions: Optional[bool] = ..., has_media: Optional[bool] = ..., has_images: Optional[bool] = ..., has_video_links: Optional[bool] = ..., has_geo: Optional[bool] = ..., lang: Optional[str] = ...) -> None: ...
    def build(self) -> List[tweepy.StreamRule]: ...
