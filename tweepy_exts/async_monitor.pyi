import tweepy
from . import static as static
from .logger import logger as logger
from .models import Tweet as Tweet
from .query_builder import QueryBuilder as QueryBuilder
from _typeshed import Incomplete
from tweepy.asynchronous import AsyncStreamingClient
from typing import Any, Callable, List, Optional


class MonitorState:
    valid_authors_ids: List[str]


OnStatusCallback = Optional[Callable[[Tweet], Any]]


class AsyncMainStreamingClient(AsyncStreamingClient):
    def __init__(self, *args: Any, on_status_callback: OnStatusCallback = ..., **kwargs: Any) -> None: ...
    async def on_connect(self) -> None: ...
    async def on_closed(self, resp: Any) -> None: ...
    async def on_data(self, data: bytes) -> None: ...


class AsyncMonitorEssentialAcces:
    streaming_client: Incomplete
    client: Incomplete
    def __init__(self, bearer_token: str, on_new_status: OnStatusCallback) -> None: ...
    async def usernames_to_ids(self, usernames: List[str]) -> None: ...
    async def track_keywords(self, keywords_list: List[str]) -> None: ...
    async def delete_existing_rules(self) -> None: ...

    async def track_users_by_usernames(
        self, usernames: List[str],
        remove_replies: bool = ..., remove_retweets: bool = ..., remove_quotes: bool = ...) -> None: ...

    async def add_rules(self, rules: List[tweepy.StreamRule], delete_existing: bool = ...) -> Any: ...
    async def run(self, rules: List[tweepy.StreamRule]) -> None: ...
    async def sample(self) -> None: ...
